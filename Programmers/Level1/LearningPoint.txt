2020.08.06
*SortDes.java
char[] sol = str.toCharArray(); // 문자열을 char 배열로 전환
Arrays.sort(sol); // sort
return new StringBuilder(new String(sol)).reverse().toString(); 
// StringBuilder를 통해서 문자열을 역순으로 배치

String [] str_split = s.split("");                  // String을 배열로 하나씩 분리하기	
Arrays.sort(str_split);                        	   // 오름차순 정렬
Collections.reverse(Arrays.asList(str_split)); // 컬렉션을 통해서 내림차순 정렬

2020.08.07
*FindKim.java
if(seoul[i].equals("Kim")) { 
// equals와 '=='의 차이는 equals는 저장되어 있는 값에 대한 비교, 
// '=='는 저장되어 있는 주소 값 비교(그런데 '=='도 동일한 값이 나왔다..?)
return "김서방" + x + "있다" ;
// 여기서 x는 지역변수이기 때문에 return이 되지 않는데 예시에 있다...?
String[] kkimm = {"Jane","aa", "Kim"};
System.out.println(kim.solution(kkimm));
System.out.println(kim.solution({"Jane","aa", "Kim"}));
// 여기서 배열을 함수에 직접 넣을 수는 없고 
// 변수에 담아서 함수에 인자로 대입할 수 있다.
int x = Arrays.asList(seoul).indexOf("Kim");
// 배열을 리스트의 형태로 치환해서 indexOf함수를 이용해서 "Kim"을 찾을 수 있다.

2020.08.10
*FindDay.java
//         Calendar cal = Calendar.getInstance();
//         cal.set(Calendar.YEAR, 2020);
//         cal.set(Calendar.MONTH, 5);
//         cal.set(Calendar.DAY_OF_WEEK, 24);
Calendar 클래스와 getInstance를 통해서 현재의 년도 시간을 알 수 있다. 또한 set 함수를 통해서 년도 달을 변경할 수 있다.
//return day[date_index - 1];
이 부분에서 인덱스가 -가 될 때 오류가 발생하는 것을 확인했다.(프로그램 상은 돌아감.)

2020.08.11
*IhateMath.java
Vector<Integer> v2 = new Vector<Integer>();
 배열보다 메모리 효율이 좋은 벡터를 이용해서 문제 갯수가 늘어날 때마다 데이터를 늘리고 비교하려고 했지만
 실행시간이 오래 걸리고, 메모리도 더 쓰게 되서 오히려 효율이 떨어진 것을 확인할 수 있었다...
 동적으로 할당할 필요가 없는 문제이기 때문에 굳이 벡터를 쓰지 않아도 됐다...
 푸는데 너무 오래걸렸다... ㅠㅠ
 벡터클래스에서 add() 함수 인자를 2개를 입력하면 해당 인덱스에 값을 추가할 수 있다는 것을 알게 되었다.
 그리고 elementAt() 함수를 통해서 해당 인덱스에 있는 값을 출력할 수 있다.

return list.stream().mapToInt(i->i.intValue()).toArray();
리스트를 int 배열의 형태로 출력할 수 있다는 것을 배웠다.
배열을 리턴할 때 return new int[]{}의 형태로 출력할 수 있다는 것을 배웠다.

  int[] res = new int[list.size()];
        for (int i = 0; i < res.length; ++i) {
            res[i] = list.get(i);
        }
그리고 int 배열 값을 할당하기 전에 list.get()함수를 통해서 할당할 수 있다는 것을 배웠다.

*DongiveUp.java
시간 효율이 떨어져서 전에 통과를 못했었는데.. 통과해서 다행이다..
해시를 이용한 문제였지만 if문 비교를 통해서 문제를 해결했다... ㅎㅎ

if (!participant[i].equals(completion[i])) {
여기서 또 '=='을 사용해서 틀렸었다..(비쥬얼스튜디오코드에서는 잘 돌아가던데.. ㅎㅎ)
string 끼리 비교할 때는 '=='은 주소를 비교하는 것이고 equals를 통해서 값을 비교하는 것을 잘 기억해야겠다.

import java.util.HashMap;

(참고)
class Solution {
    public String solution(String[] participant, String[] completion) {
        String answer = "";
        HashMap<String, Integer> hm = new HashMap<>();
        for (String player : participant) hm.put(player, hm.getOrDefault(player, 0) + 1);
        for (String player : completion) hm.put(player, hm.get(player) - 1);

        for (String key : hm.keySet()) {
            if (hm.get(key) != 0){
                answer = key;
            }
        }
        return answer;
    }
}
해시를 이용한 문제 풀이인데,,, 잘 모르겠다.. 조금 더 공부해야 할 것같다.

(참고)
import java.util.*;
class Solution {
    public String solution(String[] participant, String[] completion) {
        Arrays.sort(participant);
        Arrays.sort(completion);
        int i;
        for ( i=0; i<completion.length; i++){

            if (!participant[i].equals(completion[i])){
                return participant[i];
            }
        }
        return participant[i];
    }
}
i를 for문 밖에 정의해서 if문 하나를 더 줄일 수 있었다.

2020.08.12
*SumOfDivisor
실행시간을 어떻게 하면 줄일 수 있을까 고민해봤지만 크게 답이 나오지 않았다...

(참고)
        int answer = 0;
        for (int i = 1; i <= num / 2; i++) {
            if (num % i == 0)
                answer += i;
        }
        return answer + num;
다른 사람의 풀이를 봤을 때, 2로 나누고 자기 자신을 더해서 리턴할 수 있다는 것을 배웠다.
이로써 실행시간을 두배 정도 줄일 수 있었다.

*IndexK
int size = 0;
        for(int i : result){
            // System.out.print(i + " ");
            answer[size++] = i;
        }
        return answer;
    }
리스트를 배열에 넣고 출력하는 부분에서 컬렉션을 배웠고 size를 for문 안에 정의해서 잘 돌아가지 않았다....ㅠ

import java.util.Arrays;
class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = new int[commands.length];

        for(int i=0; i<commands.length; i++){
            int[] temp = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
            Arrays.sort(temp);
            answer[i] = temp[commands[i][2]-1];
        }
        return answer;
    }
}
copyOfRange를 함수를 통해서 배열에 값을 즉각적으로 저장할 수 있다는 것을 배웠다.
그리고 sort도 자체적으로 구현해 볼 필요성이 들었다...

2020.08.13
*HateSameNum.java
// Iterator<Integer> iter = list_read.iterator();
처음에는 iterator를 이용해서 구현하려고 했지만 삭제하는 과정에서 계속 에러가 발생해서 다른 방식으로 구현했다.

if (arr[i] == arr[i + 1] && !list.contains(arr[i]))
list.contains() 함수를 이용해서 원소의 값이 있는지를 확인할 수 있다는 것을 배웠다.

(참고)
int preNum = 10;
for(int num : arr) {
    if(preNum != num)
        tempList.add(num);
    preNum = num;
}     
컬렉션을 통해서 이전 값을 저장하는 방식으로도 구현할 수 있다는 것을 배웠다.

StringBuilder sb = new StringBuilder();
int size = arr.length;
sb.append(arr[0]);
for(int i=1; i<size; i++){
    if(arr[i-1]!=arr[i]) sb.append(arr[i]);
}
StringBuilder를 통해서도 구현할 수 있다는 것을 배웠다.

*Find_p_and_i
String s_lower = s.toLowerCase();
스트링 변수를 toLowerCase() 함수를 소문자로 변환하는 함수를 활용할 수 있었다.

String[] s_arr = s_lower.split("");
"p"와 ""y"를 구별하기 위해서 string을 split을 이용해서 String 배열에 값을 넣을 수 있었다.

(참고)
return s.chars().filter( e -> 'P'== e).count() == s.chars().filter( e -> 'Y'== e).count();
람다식으로 한 줄 코딩한 부분은 잘 이해가 가지는 않는다...ㅎㅎ

if (s.charAt(i) == 'p')
charAt 함수를 이용해서 'p' 'y'를 비교하는 코드도 볼 수 있었다.

long pCnt = Arrays.stream(s.split("")).filter(str->str.equals("P")).count();
long yCnt = Arrays.stream(s.split("")).filter(str->str.equals("Y")).count();
stream 함수를 이용한 코드도 볼 수 있었다.

*Divisor
list를 정렬할 때 Collections.sort(list)를 사용한다는 것을 다시 깨달았다.

return Arrays.stream(array).filter(factor -> factor % divisor == 0).toArray();
람다식을 다시 공부해야할 필요성을 느꼈다...

return ret.stream().mapToInt(i -> i).toArray();
이 또한..

int[] answer = Arrays.stream(arr).filter(factor -> factor % divisor == 0).toArray();


System.arraycopy(temp, 0, ret, 0, ret.length);
arraycopy를 이용한 것도 확인할 수 있었다.

2020.08.14
*BorrowClothes.java
몸도 안 좋고, 문제도 해결도 못했다..

2020.08.15
*BorrowClothes.java
Arraylist 두개와 set, get 함수를 이용해서 구현했다.

(참고)
int[] people = new int[n];
        int answer = n;

        for (int l : lost) 
            people[l-1]--;
        for (int r : reserve) 
            people[r-1]++;

poeple 배열 하나로 두 가지 형태의 변수를 표현했다는 아이디어가 돋보였다.

HashSet<Integer> ko = new HashSet<Integer>();
해시셋을 이용한 풀이도 볼 수 있었다.

*Odd_and_Even.java
(참고)
return num % 2 == 0 ? "Even": "Odd";
삼항 연산자에  대해서 배울 수 있었다.

*FindAverage.java
(참고)
if(array == null){
        return 0;
}
array == null 로 객체의 생성 유무를 판단할 수 있는 것을 배웠다.

return (int) Arrays.stream(array).average().orElse(0);
이런 라이브러리가 있다는 것을 배웠다..

*Invisible_num.java
subString을 이용해서 구현했다.

(참고)
class Solution {
  public String solution(String phone_number) {
     char[] ch = phone_number.toCharArray();
     for(int i = 0; i < ch.length - 4; i ++){
         ch[i] = '*';
     }
     return String.valueOf(ch);
  }
}
tocharArray함수를 이용해서 char형 배열에 값을 넣고 다시 String.valueOf함수를 통해서 String으로 반환하는 것을 배웠다. 

// return phone_number.replaceAll(".(?=.{4})", "*");
정규식을 이용해서 구현한 코드인데 잘 이해는 되지 않는다..

2020.08.16
*RactangleStar.java
중첩 for문으로 문제를 해결할 수 있었다.

*CaesarCipher.java
예외처리도 다했는데 왜 통과가 안 되는지 잘 모르겠다..

int ascii_num = (int) c_arr[i];
c_arr[i] = (char) (ascii_num + n - 26);
아스키코드를 이용해서 문자를 바꾸는 것을 배웠다.

return c_arr.toString(); -> return String.valueOf(c_arr);
toString으로 리턴하면 주소 값이 출력되는 것을 확인했다.
그래서 String클래스의 valueOf함수를 이용했다.

2020.08.17
*SumOfMatrix.java
이차원 배열은 처음 다뤄봤는데, 처음에 행을 셀 때 new line으로 구분하려고 했는데 생각보다 단순한 문제였다.
2차원배열일 때는 arr[0].length가 가능하다는 것을 알았다.

2020.08.18
*IntervalOfX.java
자료형별로 데이터를 저장할 수 있는 범위에 대해서 다시 상기 해보았다.

2020.08.19
*HarshadNumber.java
answer[i - 1] = x * i;
answer[i - 1] = Long.valueOf(x) * i;
위 코드로 작성하면 실패하고 밑의 코드로 작성하면 성공했었다.
그런데 int를 long형에 저장하면 자동으로 형 변환이 될 것이고 제시한 값의 범위가 1천만인데 왜 실패한 지는 잘 모르겠다..
어쨋든 Long.valueOf() 배웠다.

2020.08.20
*GuessCollatz.java
System.out.println(gc.solution(626331));
int는 21억 +- 까지 범위가 넓은데 왜 여기서 에러가 발생하는 지 모르겠다..

*DescNum.java
long형을 String 배열에 넣고 String 변수에 String 배열의 값을 한 줄로 입력하는데 어떻게 하면 실행을 줄일 수 있을 지 고민했지만..
for문으로 해결했다.

Arrays.sort(str_n, Collections.reverseOrder());
그리고 Collections.reverseOrder() 함수를 통해서 내림차순 정렬을 할 수 있다는 것을 배웠다.

(참고)
Integer.toString(n).chars().sorted().forEach(c -> res = Character.valueOf((char)c) + res);
람다식.. 또 배웠다.

char[] c = str.toCharArray();
Arrays.sort(c);
StringBuilder sb = new StringBuilder(new String(c,0,c.length));  
return Integer.parseInt(((sb.reverse()).toString()));
String builder를 이용하려고 했는데 char형에 값을 넣고 초기화하는 것은 생각을 못했다..
이렇게 하면 실행시간을 많이 줄일 수 있을 것이다.

Long.parseLong(String.valueOf(n).chars().mapToObj(ch -> (char) ch)
                .sorted(Comparator.reverseOrder())
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString());
한 줄코딩이었는데 잘 모르겠다..

2020.08.21
*ReverseNum.java
int형 배열에 넣어서 출력하는 부분이 생각보다 시간을 많이 썼던 것 같다.

answer[i] = Integer.parseInt(str_n[str_n.length - 1 - i]);
long형 변수를 스트링 배열에 넣고 역순으로 int 배열에 넣는 방식으로 구현했다.

(참고)
String s = String.valueOf(n);
StringBuilder sb = new StringBuilder(s);
sb = sb.reverse();
String[] ss = sb.toString().split("");
스트링 빌더를 이용해서 reverse() 함수를 사용할 수 있다는 것을 배웠다.

char[] arr = new StringBuffer(String.valueOf(n)).reverse().toString().toCharArray();
for(int i = 0; i < arr.length; i++){
    answer[i] = arr[i] - 48;
}
char 배열에 StringBuffer를 이용해서 한 줄로 구현하고 48을 빼면 숫자 0부터 출력할 수 있다는 것을 알았다.

String str = "" + (long)n;
또한 String + int 를 하게 되면 String이 된다는 것을 다시 상기할 수 있었다.

int length = Long.toString(n).length();
long 형 변수를 String으로 만들어서 length를 구할 수 있다는 것을 배울 수 있었다.

2020.08.22
*SquareRoot.java
Math.sqrt() 함수에 대해서 다시 한 번 상기하기 되었다.

(참고)
if (Math.pow((int)Math.sqrt(n), 2) == n) {
    return (long) Math.pow(Math.sqrt(n) + 1, 2);
}
Math.pow() 함수도 사용할 수 있었다는 것을 배웠다.

for(long i=2;i<n;i++){
    if(n/i == i && n%i ==0){
        return (i+1)*(i+1);
    }
}
가장 직관적인 코드이지만 for문으로 실행시간이 길어질 수 있겠다는 생각을 했다.

answer = ((long)Math.pow(calc, 2)==n)?(long)Math.pow(calc+1, 2):-1;
삼항연산자를 사용할 수 있다는 것도 생각하게 되었다.

2020.08.23
*StrangeChar.java
한 줄에서 대소문자를 바꾸는 것이 아니라 한 단어의 홀짝을 논해서 구현하는데 시간이 좀 걸렸다..

if(s_arr[i].equals(" ") && odd_even % 2 == 0) {
    odd_even += 1;
}
공백 문자가 있으면 홀짝을 바꿀 수 있도록 설정해서 문제를 해결했다.

(참고)
for(String ss : array) {
    cnt = ss.contains(" ") ? 0 : cnt + 1;
    answer += cnt%2 == 0 ? ss.toLowerCase() : ss.toUpperCase(); 
}
컬렉션과 삼항연산자를 이용해서 풀이를 이용했던 것을 배울 수 있었다.

String[] a=s.split(" ",-1);
for(int i=0; i<a.length; i++){
    String msg=a[i];
    for(int j=0; j<msg.length(); j++) {
        if(j%2==1) {
            String b = Character.toString(msg.charAt(j));
            answer += b.toLowerCase();
        }
    }
}
2차원 배열을 사용하지 않고도 문자열 배열에 문자를 단어별로 넣고 String 변수와 Character.toString() 함수와
charAt()함수를 이용해서 구현할 수 있다는 것을 배웠다.

2020.08.24
*RemoveMin.java
가장 작은 수만 지우는 작업이 실행시간을 줄이는 부분에서는 실패한 느낌이다..

(참고)
int min = Arrays.stream(arr).min().getAsInt();
return Arrays.stream(arr).filter(i -> i != min).toArray();
stream을 사용하면 굉장히 길이가 줄어드는데 람다랑 stream arr에 대해서 또 공부해야겠다..

2020.08.25
*GongYakSu.java
예전에 외웠던 코드라서 어렵지는 않았다..

for(int i = 1; i<=a; i++) 
    if(a%i==0&&b%i==0)
        maxi = i;

for(int i = a*b; i>0; i--)
    if(i%a==0&&i%b==0)
        mini = i;
실행시간은 좀 걸리지만 굉장히 직관적인 코드를 배웠다.

2020.08.27
*TheWayStringSort.java
n번째 인덱스가 같을 값들을 정렬해서 출력하는 부분이 계속 해결되지 않아 풀지 못했다..

2020.08.28
*TheWayStringSort.java

Arrays.sort(strings);
ArrayList<Character> nst = new ArrayList<Character>();
ArrayList<String> nst_str = new ArrayList<String>();
먼저 strings를 정렬 후, 중복 값을 없애기 위해서 char형과 String ArrayList 두 개를 생성해서 문제를 해결했다.

(참고)
ArrayList<String> arr = new ArrayList<>();
for (int i = 0; i < strings.length; i++) {
    arr.add("" + strings[i].charAt(n) + strings[i]);
}
Collections.sort(arr);
answer = new String[arr.size()];
for (int i = 0; i < arr.size(); i++) {
    answer[i] = arr.get(i).substring(1, arr.get(i).length());
}
String형 ArrayList 하나만 생성하고 n번째 인덱스를 맨 앞에 붙여서 정렬 후, substring 함수를 이용해서 리턴할 수 있다는 것을 배웠다.

Arrays.sort(strings, new Comparator<String>(){
    @Override
    public int compare(String s1, String s2){
        if(s1.charAt(n) > s2.charAt(n)) return 1;
        else if(s1.charAt(n) == s2.charAt(n)) return s1.compareTo(s2);
        else if(s1.charAt(n) < s2.charAt(n)) return -1;
        else return 0;
    }
}
Comparator 객체를 생성해서 compare함수를 생성해서 문제를 해결한 것도 확인할 수 있었다.

*CaesarCipher.java
처음에 왜 안 되는지 모르다가 다양한 예외 사항을 테스트 한 끝에 해결할 수 있었다.
if else문으로만 해결한 느낌이라 코드가 긴 느낌이 있다..
 
char형 배열은 String.valueOf() 함수를 이용해서 String 변수에 값을 넣을 수 있고,
String은 String.toCharArray() 함수를 사용해서 char형 배열에 값을 넣을 수 있다는 것을 다시 숙지했다.

(참고)
n = n % 26;

if (Character.isLowerCase(ch)) {
    ch = (char) ((ch - 'a' + n) % 26 + 'a');
} else if (Character.isUpperCase(ch)) {
    ch = (char) ((ch - 'A' + n) % 26 + 'A');
    }
사칙연산을 이용해서 입력값과 'a'와의 차이를 구하고 n을 더한 값을 26으로 나눈 나머지 값 + 'a'의 아스키코드 값을 더해서
if 한 번만으로 'z'를 넘어가면 'a'에서부터 시작하는 알고리즘을 배울 수 있었다.
그리고 Character.isLowerCase() 함수를 배울 수 있었다.

 return s.chars().map(c -> {
            int n = _n % 26;
            if (c >= 'a' && c <= 'z') {
                return 'a' + (c - 'a' + n) % 26;
            } else if (c >= 'A' && c <= 'Z') {
                return 'A' + (c - 'A' + n) % 26;
            } else {
                return c;
            }
        }).mapToObj(c -> String.valueOf((char)c))
        .reduce((a, b) -> a + b).orElse("");
}
비슷한데 람다식으로도 구현할 수 있다는 것을 배웠다.

2020.08.29
*HowManyPnum.java
하루종일 고민해봤지만 효율성이 0이 나오는 이유를 모르겠다..

2020.08.30
*HowManyPnum.java
에라토스테네스의 체로 알고리즘을 구현해보았지만 역시 효율성이 0이라서 모르겠다... 후..

2020.08.31
CMD 창으로 깃을 할 줄 모르는 친구에게 테스트를 진행했다..

2020.09.01
*Budget.java
문제를 잘 읽고 풀어서 빨리 풀 수 있었다.

(참고)
 for (int i = 0; i < d.length; i++) {
            budget -= d[i];

            if (budget < 0) break;

            answer++;
        }
빼는 알고리즘도 생각해볼 수 있었으면 좋았던 것 같다.

Arrays.copyOf를 사용한 풀이도 있었는데 굳이 쓰지 않아도 됐던 것같다.

2020.09.02
*FailureRate.java
전 날했지만.. 커밋하는 것을 까먹었다...

HashMap<Integer, Double> hm = new HashMap<Integer, Double>();    // 스테이지별로 실패율을 저장할 해시맵
List<Integer> keySetList = new ArrayList<>(hm.keySet());         // value값 내림차순 정렬을 위한 list 정의
Collections.sort(keySetList, (o1,o2) -> (hm.get(o2).compareTo(hm.get(o1))));
한 2시간정도 걸린거 같은데 책과 구글링을 활용해서 람다와 Hashmap으로 구현할 수 있었다.
문제가 스테이지 당 실패율을 구하고 실패율이 가장 높은 스테이지별로 오름차순하는 문제였다.
실패율을 구하고 비교를 해서 해당 스테이지(인덱스)를 출력하는 부분에서 고민을 많이 했고
해시맵을 이용해서 키 값을 내림차순으로 정렬 후 키 값에 해당하는 키를 출력하면 된다고 생각했다.

그리고 테스트케이스 몇 개가 통과되지 않아서 생각해보았는데 0으로 나눌 때에 대한 예외처릴 안 한 것 때문이었다..
다른 사람들도 해시맵을 이용한 경우도 있었고, list에 실패율을 넣고 list의 인덱스를 출력하는 방식으로 구현한 것을 볼 수 있었다.

2020.09.03
*DartGame.java
하루종일 매달렸는데 결국 못 풀었다.. 아직 많이 부족한 게 느껴진다.. 
문자열을 하나씩 체크할 때 char형으로 구현하려고 했는데 10에 대한 처리를 어떻게 해야할 지 잘 안 되서
자료구조를 바꿔보고 다른 시도를 해봤지만 잘 되지 않았다...
내일은 다른 문제를 풀어봐야할 것 같다...
카카오 너무 어렵다ㅠㅠ

구현 과정
식		        인덱스		구현했는가
10s*2s*3s*		2 5 8		
1s*2s3s*		2 7		        o
1s*2s*3s		2 5		        o
1s2s*3s*		4 7		        o
1s*2s3s		    2		        o    
1s2s*3s		    4		        o    	
1s2s3s*		    6		        o    

index: 2, 4, 5, 6, 7, 8

2020.09.04
*FailureRate.java
구현 과정
식		인덱스		구현했는가
10s*2s*3s*	2 5 8		
1s*2s3s*		2 7		        o
1s*2s*3s		2 5		        o
1s2s*3s*		4 7		        o
1s*2s3s		    2		        o    
1s2s*3s		    4		        o    	
1s2s3s*		    6		        o    


'S', 'D', 'T' index : 1, 3,4 5,6,7
'*' index : 2, 4,5, 6,7,8

10이 나올 경우
10D9D9D
9D*10D9D
9D10D9D
9D9D10D
10D10D10D

if (dartResult.charAt(i) - '0' >= 0 && dartResult.charAt(i) - '0' <= 9) {
    if (dartResult.charAt(i) - '0' == 1 && dartResult.charAt(i + 1) - '0' == 0){
char형을 정수랑 비교하기 위해서 Integer.valueOf() 함수, 명시적 형변환을 해도 되지 않았는데 이렇게 하니까 됐다..

다른 사람들은 스택 또는 다른 방식으로 구현한 것을 볼 수 있었다..

index	 0 1 2 3 4
0	[[0,0,0,0,0],
1	[0,0,1,0,3],
2	[0,2,5,0,1],
3	[4,2,4,4,2],
4	[3,5,1,3,1]]

2020.09.05 ~ 06
*DrawTheDoll.java
새벽이 되어서야 구현할 수 있었다.
처음에 문제를 생각하지 않고 5x5라고만 생각하고 스택을 5개 만들었었는데,,, 어쩐지 테스트 케이스가 많이 안 됐다..
후,, 그 다음에 생각한 게 입력된 2차원 배열을 바로 활용해서 중첩 for문을 활용한 것이었고 stack하나를 이용해서 구현할 수 있었다.
시간이 지나면서 집중력이 많이 떨어져서 사소한 실수때문에 시간을 더 허비했다..
어쨌든 구현해서 기분은 좋았다.

2020.09.16
*Challenge1.java
10일에 풀었던 문제인데 지금 커밋했다.
프로그래머스에서 주관하는 대회에서 5문제 중 1문제만 제대로 풀었다.. 노력하자..