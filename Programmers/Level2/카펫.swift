// 카펫
// 문제 유형: 수학
// 느낀점: 완전탐색인가 이 문제가..?
// 24, 24 = [8, 6]이 왜 되는지 이해하는데 시간이 오래 걸렸고
// 공식을 어떻게 만들어서 적용할 수 있을까에서 시간을 많이 사용하게 됨...
// 문제에서 가로의 길이가 세로의 길이보다 같거나 길다고 해서 기본적으로 가로로 증가하는 줄앎..
// 가로의 길이가 세로의 길이보다 더 큰 조건에서 브라운을 최소 개수를 사용한다고 했으면 더 이해하기 쉬웠을듯.
// 다른 사람의 힌트로 알 수 있었음.
// w = 너비, h = 높이이고 다음의 식을 도출할 수 있음.
// 1. 2w + 2h - 4 = b 
// 2. b + y = w * h
// 1.을 2.의 b에 대입하면
// y = w * h - 2w - 2h + 4가 되어, y = (w - 2)(h - 2) 식이 도출됨.
// 시행하는 최대 횟수는 주어진 (brown - 8) / 2 => 최소 개수의 brown을 사용해야하기 때문(처음에는 yellow를 max 횟수로 생각함)
// 다음과정은 w를 증가시킬 수 있는 최대에서부터 노란색을 채우고 위의 식과 일치 할 때 까지 반복

import Foundation

func solution(_ brown:Int, _ yellow:Int) -> [Int] { 
    let max = (brown - 8) / 2
    
    var (w, h) = (3, 3)
    for i in 0..<max {
        w = 3 + max - i
        h = 3 + i
        
        if w * h != brown + yellow { continue }
        if yellow == (w - 2) * (h - 2) {
            return [w, h]
        }
    }
    return [w, h]
}